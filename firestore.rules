rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users collection - kendi verilerini okuyabilir + admin tüm kullanıcıları yönetebilir
    match /users/{userId} {
      // Kendi verilerini okuma/yazma
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Admin tüm kullanıcıları okuyabilir
      allow read: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'superadmin';
      
      // Admin tüm kullanıcıları güncelleyebilir (ban/unban için)
      allow write: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'superadmin';
      
      // Admin kullanıcı listesini görebilir
      allow list: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'superadmin';
    }
    
    // Helper function to check user status
    function isUserAllowed() {
      let userDoc = get(/databases/$(database)/documents/users/$(request.auth.uid));
      return userDoc != null && 
             (userDoc.data.isApproved == true || userDoc.data.isApproved == null) &&
             userDoc.data.isBanned != true;
    }
    
    // Links collection - authenticated users can access
    match /links/{linkId} {
      allow read, write, list: if request.auth != null;
      allow read: if request.auth != null && 
        resource.data.createdBy == request.auth.uid;
    }
    
    // API Tokens collection - sadece token sahibi erişebilir
    match /apiTokens/{tokenId} {
      allow read, write: if request.auth != null && 
        resource.data.userId == request.auth.uid;
      
      allow create: if request.auth != null && 
        request.resource.data.userId == request.auth.uid;
        
      // Collection query için list permission
      allow list: if request.auth != null;
    }
    
    // Public read için links (redirect için)
    match /links/{linkId} {
      allow read: if true; // Public read for redirects
    }
  }
}
